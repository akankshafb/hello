{"version":3,"sources":["images/cart.png","components/services/index.js","actions/addToCart.js","components/ItemList.js","actions/printHelloAction.js","components/SearchItem.js","components/OrderSummary.js","App.js","serviceWorker.js","reducers/addTocart.js","reducers/index.js","index.js"],"names":["module","exports","dataList","a","async","fetch","response","console","log","data","json","addToCart","type","payload","ItemList","props","testCount","alert","myAddCartFunc","c","addTocart","state","itemList","services","then","setState","this","className","length","map","index","key","src","alt","name","price","discount","onClick","Component","mapDispatchToProps","connect","JSON","stringify","printHelloWorld","message","SearchItem","getCount","val","myFunction","parse","localStorage","getItem","totalCount","item","qty","count","orderListNew","myCount","to","pathname","imageCart","width","height","e","OrderSummary","dataListSummary","orderList","totalItem","myQtyRef","React","createRef","itemId","task","itemsCopy","Object","assign","totalItemCopy","id","parseInt","push","pop","orderTotal","totalPrice","totalDiscount","i","afterDiscountPrice","value","changeQty","readOnly","ref","App","exact","path","component","Boolean","window","location","hostname","match","initialState","array","array2","setItem","arrayDataList","arrayDataList2","flag","combinedReducers","combineReducers","store","createStore","subscribe","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.14512246.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cart.fa6be6f9.png\";","// import React, { useState, useEffect } from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\n// import SearchItem from '../SearchItem';\r\n\r\n\r\nconst dataList = async ()=>{\r\n    let response = await fetch(\r\n        `https://api.myjson.com/bins/qhnfp`\r\n    )\r\n    console.log(\"Serivce\");\r\n    let data = response.json();\r\n    return data;\r\n\r\n}\r\n\r\nexport default dataList;\r\n// method: \"GET\",\r\n// headers: new Headers({\r\n//     Accept: \"application/vnd.github.cloak-preview\"\r\n// })\r\n\r\n// function DataList() {\r\n//     const [itemList, updatedItemList] = useState([]);\r\n//     var selectorItemid;\r\n//     useEffect(() => {\r\n//         fetch(\r\n//             `https://api.myjson.com/bins/qhnfp`,\r\n//             {\r\n//                 method: \"GET\",\r\n//                 headers: new Headers({\r\n//                     Accept: \"application/vnd.github.cloak-preview\"\r\n//                 })\r\n//             }\r\n//         )\r\n//             .then(res => res.json())\r\n//             .then(response => {\r\n//                 response.salePrice = \"test\";\r\n\r\n//                 updatedItemList(response);\r\n//                 // console.log(response);\r\n//             })\r\n//             .catch(error => console.log(error));\r\n//     }, []);\r\n\r\n    \r\n   \r\n//     return itemList;\r\n\r\n//     // return (\r\n//     //     <div>\r\n//     //         <div className=\"row margin-top20\">\r\n//     //             {\r\n//     //                 itemList.map((c, index) =>\r\n\r\n//     //                     <div className=\"col-sm-3\" key={index}>\r\n//     //                         <div className=\"itemBox\">\r\n//     //                             <div>\r\n//     //                                 {/* <img src={data.img_url}/> */}\r\n//     //                                 <img src=\"https://cdn2.vectorstock.com/i/thumb-large/88/26/no-image-available-icon-flat-vector-25898826.jpg\" />\r\n//     //                             </div>\r\n//     //                             <div className=\"itemDetail\">\r\n//     //                                 <p>{c.name}</p>\r\n//     //                                 <span className=\"Regularprice\">${c.price}</span>\r\n//     //                                 <span className=\"Saleprice\">{c.price - (c.price * c.discount / 100)}</span>\r\n//     //                                 <button className=\"btn-primary addToCartBtn\" onClick={()=>this.props.childHandler('hello')}>Add to cart</button>\r\n//     //                             </div>\r\n//     //                         </div>\r\n//     //                     </div>)\r\n//     //             }\r\n//     //         </div>\r\n//     //         {/* <SearchItem itemid={selectorItemid}/> */}\r\n//     //     </div>\r\n//     // );\r\n// }\r\n\r\n// export default DataList;\r\n","const addToCart=(data)=>{\r\n    debugger;\r\n     return {type:\"ADD_TO_CART\",payload:data};\r\n }\r\n export default addToCart;","import React, { Component } from 'react';\r\nimport './ItemList.css';\r\nimport services from './services/';\r\nimport addTocart from '../actions/addToCart';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nclass ItemList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            itemList: []\r\n            //errorMsg: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        services().then((data)=>{\r\n            console.log('data', data);\r\n            this.setState({\r\n                itemList: data\r\n            })\r\n        })\r\n    }\r\n\r\n    testCount=()=>{\r\n        let count=10;\r\n        alert(count);\r\n       // return count;\r\n    }\r\n\r\n    myAddCartFunc=(c)=>{\r\n        this.props.addTocart(c);\r\n        alert(this.props.addTocart);\r\n        this.testCount();\r\n    }\r\n\r\n    render() {\r\n        const {itemList} = this.state;\r\n        //this.testCount();\r\n       // console.log(\"ItemList\");\r\n        return (\r\n        \r\n                \r\n                <div className=\"row margin-top20\">\r\n                 {\r\n                    itemList.length && itemList.map((c, index) =>\r\n                        <div className=\"col-sm-3\" key={index}>\r\n                            <div className=\"itemBox\">\r\n                                <div>\r\n                                    <img src=\"https://oxygenphones.com/wp-content/uploads/2018/04/Red-iPhone-8.png\" className=\"productImage\" alt=\"myimage\" />\r\n                                </div>\r\n                                <div className=\"itemDetail\">\r\n                                    <p>{c.name} </p>\r\n                                    <span className=\"Regularprice\">${c.price}</span>\r\n                                    <span className=\"Saleprice\">{c.price - (c.price * c.discount / 100)}</span>\r\n                                    <span className=\"discountRate\"><b>{c.discount}% off</b></span>\r\n                                    <br/>\r\n                                   <p className=\"text-center\"><button className=\"btn-primary addToCartBtn\" onClick={()=>this.myAddCartFunc(c)}>Add to cart</button></p> \r\n                                </div>\r\n                            </div>\r\n                        </div>)\r\n                }\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps={\r\n    addTocart\r\n}\r\nconst mapStateToProps=(state)=>{\r\n    console.log(\"mapActionToProps\",JSON.stringify(state.data));\r\n    debugger;\r\n    return state;\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemList);\r\n","//export const PRINT_HELLO='print-hello';\r\nconst printHelloWorld=()=>{\r\n   //console.log(\"Hello Action..\");\r\n    return {type:\"PRINT_HELLO\",payload:{message:'Hello World!'}};\r\n}\r\nexport default printHelloWorld;","import React, { Component } from 'react';\r\nimport './searchItem.css';\r\nimport ItemList from './ItemList';\r\nimport { Link } from 'react-router-dom';\r\nimport imageCart from '../images/cart.png';\r\nimport printHelloWorld from '../actions/printHelloAction';\r\nimport setLocalStorageData from '../actions/setLocalStorageData';\r\nimport addTocart from '../actions/addToCart';\r\nimport {connect} from 'react-redux';\r\n\r\nclass SearchItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        var dataList=JSON.parse(localStorage.getItem('dataList'));\r\n        var totalCount=0;\r\n\r\n        if(dataList===null){\r\n            totalCount=0;\r\n        }else{\r\n            dataList.map((item)=>{\r\n                totalCount=totalCount+item.qty;\r\n            });\r\n        }\r\n\r\n        this.state = {\r\n            count: totalCount,\r\n            dataList: [],\r\n            orderListNew: [],\r\n            myCount:''\r\n        }\r\n\r\n    }\r\n\r\n    /* Add To Cart Button Funtion */\r\n    // childHandlerFunc = (val) => {\r\n    //     this.state.orderListNew.push(val);\r\n    //     this.getDataSummaryList(val);\r\n    //     val.qty = 1;\r\n    //     this.getDataList(val);\r\n    //     this.setState({\r\n    //         count: ++this.state.count,\r\n    //         dataList: this.state.dataList,\r\n    //         orderListNew: this.state.orderListNew\r\n    //     })\r\n    // }\r\n/* to make list for Product summary table */\r\n    // getDataList(val){\r\n    //     const array = [];\r\n    //     let array2=[];\r\n    //     var dataList=JSON.parse(localStorage.getItem('dataList'));\r\n    //     //var orderList=JSON.parse(localStorage.getItem('orderListNew'));\r\n    //     array2=dataList;\r\n    //     if(dataList===null){\r\n    //         array.push(val);\r\n    //         localStorage.setItem('dataList',JSON.stringify(array));\r\n    //     }\r\n    //     else if(dataList.length>=1){\r\n    //         var flag=false;\r\n    //         dataList.map((item)=>{\r\n    //                     if(item.id===val.id){\r\n    //                        // alert(\"Value Matched\");\r\n    //                         flag=true;\r\n    //                         item.qty=item.qty+1;\r\n    //                     }\r\n    //             });\r\n    //         if(flag===false){\r\n    //             array2.push(val);\r\n    //         }    \r\n    //         localStorage.setItem('dataList',JSON.stringify(array2));\r\n    //     }else{\r\n    //         array.push(val);\r\n    //         localStorage.setItem('dataList',JSON.stringify(array));\r\n    //        // console.log(localStorage.getItem('dataList'));\r\n    //     } \r\n    // }\r\n\r\n/* Make list for total item and total price calculation */\r\n\r\n    // getDataSummaryList(val){\r\n    //     debugger;\r\n    //     const array = [];\r\n    //     let array2=[];\r\n    //     var dataListSummary=JSON.parse(localStorage.getItem('dataListSummary'));\r\n    //     array2=dataListSummary;\r\n    //     if(dataListSummary===null){\r\n    //         array.push(val);\r\n    //         localStorage.setItem('dataListSummary',JSON.stringify(array));\r\n    //     }else if(dataListSummary.length>=1){\r\n    //         array2.push(val);\r\n    //         localStorage.setItem('dataListSummary',JSON.stringify(array2));\r\n    //     }\r\n    // }\r\n\r\n    componentDidUpdate(){\r\n        \r\n    //var myCount=parseInt(nextState.count)+1;\r\n    //alert(\"\",this.state.count);\r\n    // if(nextState.count !== this.state.myCount){\r\n    //     this.updateState(myCount);\r\n    // }\r\n    }\r\n\r\n    // updateState =(myCount) => {\r\n    //     this.setState({\r\n    //         myCount:myCount\r\n    //     })\r\n    // }\r\n\r\n    getCount=(val)=>{\r\n      alert(\"Hiiiii\",val);\r\n        \r\n    }\r\n    myFunction=(val)=>{\r\n        alert(\"Hi I am Ak\");\r\n    }\r\n\r\nrender() {\r\n  // console.log(\"this.props.addTocart__\",this.props);\r\n    //this.getCount();\r\n        const { count,myCount } = this.state;\r\n        //this.props.loadCount();\r\n        return (\r\n            <div>\r\n                <div className=\"row HeaderStyle\">\r\n                    <div className=\"col-sm-4\">\r\n                        <h2>All Items</h2>\r\n                    </div>\r\n                    <div className=\"col-sm-4\">\r\n                    </div>\r\n                    <div className=\"col-sm-4\">\r\n                        <Link to={\r\n                            {\r\n                                pathname: '/OrderSummary',\r\n                            }\r\n                        } className=\"GoToLink\">\r\n                    <span className=\"itemCount\">{count} {myCount}</span>\r\n                            <img src={imageCart} width=\"50\" height=\"50\" className=\"cartImage\" />\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n                <div className=\"\">\r\n                    <div className=\"container bgItemList\">\r\n                        {/* <ItemList childHandler={(e) => { this.childHandlerFunc(e) }} testCount={(e)=>{this.getCount(e)}} /> */}\r\n                        <ItemList addTocart={(e) => { this.myFunction(e) }} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"\">\r\n                    <div className=\"container\">\r\n                        <p className=\"copyright\">@Copyright</p>\r\n                        <button onClick={this.getCount()}>Click me</button>\r\n                        {/* {this.props.message}\r\n                        {this.props.addTocart} */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps={\r\n    printHelloWorld,\r\n    addTocart\r\n  \r\n   // loadCount\r\n}\r\nconst mapStateToProps=(state)=>{\r\n    debugger;\r\n    console.log(\"mapActionToProps\",JSON.stringify(state.data));\r\n    return state;\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchItem);\r\n","import React, { Component} from 'react';\r\nimport './orderSummary.css';\r\nclass OrderSummary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        var dataList=JSON.parse(localStorage.getItem('dataList'));\r\n        var dataListSummary=JSON.parse(localStorage.getItem('dataListSummary'));\r\n        console.log(dataList);\r\n        this.state={\r\n            orderList:dataList,\r\n            totalItem:dataListSummary\r\n        }\r\n        this.myQtyRef = React.createRef();\r\n    }\r\n    \r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            orderList:this.state.orderList,\r\n            totalItem:this.state.totalItem\r\n        })\r\n    }\r\n    componentWillMount() {\r\n      \r\n    }\r\n    /* Add quantity */\r\n    changeQty(itemId, task,itemList){\r\n        let itemsCopy = Object.assign([], this.state.orderList);\r\n        let totalItemCopy = Object.assign([], this.state.totalItem);\r\n        itemsCopy.map((item)=>{\r\n            if(item.id==itemId){\r\n                item.qty=(task == 'add')?parseInt(item.qty)+1:((item.qty!=1)?parseInt(item.qty)-1:parseInt(item.qty));\r\n                if(task=='add'){\r\n                    totalItemCopy.push(item);\r\n                }else{\r\n                    totalItemCopy.pop(-1);\r\n                }\r\n                this.setState({\r\n                    totalItem:totalItemCopy,\r\n                     orderList:itemsCopy\r\n                })\r\n                console.log(\"New List\",this.state.totalItem);\r\n            }\r\n            return true;\r\n        })\r\n        this.setState({\r\n        })\r\n    }\r\n    render() {\r\n//        console.log(\"Location Data\",this.props.location.orderListNew);\r\n  //      debugger;\r\n  console.log(\"this.state.orderList__\",this.state.orderList);\r\n        var totalItem = this.state.totalItem;\r\n        var totalPrice = 0;\r\n        var totalDiscount = 0;\r\n        var orderTotal = 0;\r\n            for (var i = 0; i < totalItem.length; i++) {\r\n                let afterDiscountPrice = totalItem[i].price - (totalItem[i].price * totalItem[i].discount / 100);\r\n                let discount = totalItem[i].price - afterDiscountPrice;\r\n                totalPrice = (totalPrice + totalItem[i].price)-discount;\r\n                totalDiscount = totalDiscount + discount;\r\n            }\r\n        orderTotal = totalPrice;\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row HeaderStyle\">\r\n                    <div className=\"col-sm-4\">\r\n                        <h2>Order Summary</h2>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-8 bgWhite rightBorder\">\r\n                        <table className=\"table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Item({totalItem.length})</th>\r\n                                    <th>Quantity</th>\r\n                                    <th>Price</th>\r\n                                    <th>Discount</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    \r\n                                this.state.orderList.map((orderList, index) => \r\n                                <tr key={index}>\r\n                                    <td>{orderList.name}</td>\r\n                                    <td>\r\n                                        <input type=\"button\" value=\"-\" onClick={(e)=>this.changeQty(orderList.id,'substract',orderList)}/>\r\n                                        <input type=\"text\" value={orderList.qty} readOnly  className=\"itemQty\" ref={this.myQtyRef}/>\r\n                                        <input type=\"button\" value=\"+\" onClick={(e)=>this.changeQty(orderList.id,'add',orderList)} />\r\n                                    </td>\r\n                                   <td>{(orderList.price - (orderList.price * orderList.discount / 100))*orderList.qty}</td>\r\n                                    <td>{(orderList.price-(orderList.price - (orderList.price * orderList.discount / 100)))*orderList.qty}</td>\r\n                                    </tr>)}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"col-sm-4 bgWhite\">\r\n                        <p><b>Total</b></p>\r\n                        <p>Item({totalItem.length}) :  {totalPrice}</p>\r\n                        <p>Discount : {totalDiscount}</p>\r\n                        <br />\r\n                        <p>Order Total : {orderTotal}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OrderSummary;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport SearchItem from './components/SearchItem';\nimport OrderSummary from './components/OrderSummary';\n//import ItemList from './components/ItemList'\nimport { Route, BrowserRouter as Router,Switch} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n          <div>\n            <Route exact path=\"/\" component={SearchItem} /> \n            <Route path=\"/ordersummary\" component={OrderSummary} /> \n          </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import {PRINT_HELLO} from '../actions/printHelloAction';\r\n// import printHelloWorld from '../actions/printHelloAction'\r\nvar initialState=[];\r\nconst addTocart=(state=initialState,{type,payload})=>{\r\n    debugger;\r\n    switch(type){\r\n        case \"ADD_TO_CART\":\r\n            /* set data in dataListSummary localStorage */\r\n            const array = [];\r\n            var array2=[];\r\n            var dataListSummary=JSON.parse(localStorage.getItem('dataListSummary'));\r\n            array2=dataListSummary;\r\n            if(dataListSummary===null){\r\n                array.push(payload);\r\n                localStorage.setItem('dataListSummary',JSON.stringify(array));\r\n            }else if(dataListSummary.length>=1){\r\n                array2.push(payload);\r\n                localStorage.setItem('dataListSummary',JSON.stringify(array2));\r\n             }\r\n\r\n             /* set data in DataList localStorage */\r\n             const arrayDataList = [];\r\n             let arrayDataList2=[];\r\n             payload.qty = 1;\r\n             var dataList=JSON.parse(localStorage.getItem('dataList'));\r\n                arrayDataList2=dataList;\r\n                if(dataList===null){\r\n                    arrayDataList.push(payload);\r\n                    localStorage.setItem('dataList',JSON.stringify(arrayDataList));\r\n                }\r\n                else if(dataList.length>=1){\r\n                    var flag=false;\r\n                    dataList.map((item)=>{\r\n                                if(item.id===payload.id){\r\n                                // alert(\"Value Matched\");\r\n                                    flag=true;\r\n                                    item.qty=item.qty+1;\r\n                                }\r\n                        });\r\n                    if(flag===false){\r\n                        arrayDataList2.push(payload);\r\n                    }    \r\n                    localStorage.setItem('dataList',JSON.stringify(arrayDataList2));\r\n                }else{\r\n                    arrayDataList.push(payload);\r\n                    localStorage.setItem('dataList',JSON.stringify(arrayDataList));\r\n                }\r\n                \r\n        //var dataList=JSON.parse(localStorage.getItem('dataList'));\r\n        var totalCount=0; \r\n        debugger;       \r\n        if(dataList===null){\r\n            totalCount=0;\r\n        }else{\r\n            dataList.map((item)=>{\r\n                totalCount=totalCount+item.qty;\r\n            });\r\n        }\r\n        console.log(\"totalCount__\",totalCount);\r\n                \r\n            return totalCount;\r\n            default:\r\n                return state;\r\n    }\r\n\r\n   \r\n}\r\nexport default addTocart;\r\n\r\n","import {combineReducers} from 'redux';\r\nimport printHelloReducer from './pringHelloWorldReducer';\r\nimport addTocart from './addTocart';\r\n\r\nconst combinedReducers = combineReducers({data:addTocart});\r\n\r\nexport default combinedReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Route, BrowserRouter as Router,Switch} from 'react-router-dom';\nimport OrderSummary from './components/OrderSummary';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from 'redux';\nimport combineReducers from './reducers';\nimport {Provider} from 'react-redux';\n\nconst routing = (<Router>\n    <div>\n        {/* <ul>\n            \n            <li><Link to=\"/\">SearchItem</Link></li>\n            <li><Link to=\"/OrderSummary\">OrderSummary</Link></li>\n            \n        </ul> */}\n        <Switch>\n         <Route exact path=\"/\" component={App} /> \n         <Route path=\"/ordersummary\" component={OrderSummary} /> \n         </Switch>  \n\n    </div>\n</Router>)\n\nconst store=createStore(combineReducers);\nstore.subscribe(()=>{\n    console.log(\"Store Data\",store.getState());\n})\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}